<launch>
  
  <env name="ROSCONSOLE_FORMAT" value="[${node}]:${message}"/>

	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find gazebo_sim_launch)/worlds/field2015_sixRobots.world"/>
		<arg name="paused" value="false"/>
		<arg name="use_sim_time" value="true"/>
		<arg name="gui" value="false"/>
		<arg name="headless" value="false"/>
		<arg name="debug" value="false"/>
	</include>


	<!-- Pyro TEAM -->
	<!-- Team Namespace -->
	<group ns="PYRO">
		<param name="machineLocation/robot1" value="robotino1" />
		<param name="machineLocation/robot2" value="robotino2" />
		<param name="machineLocation/robot3" value="robotino3" />
		<param name="machineLocation/centralizedManager" value="" />
	</group>
	<!-- Robotino Pyro 1 -->
	<group ns="robotino1">
		<param name="teamName" value="PYRO" />
		<param name="teamColor" value="magenta" />
		<param name="robotNumber" value="1" />
		<param name="robotName" value="R1" />
		<param name="simuRobotNamespace" value="robotino1" />

		<!-- Load the gazebo_to_ros node -->
		<arg name="debug_gazebo_to_tos" value="false" />
		<param name="objectDetection/useSimLandmarks" value="false" />
		<node if="$(arg debug_gazebo_to_tos)" pkg="gazebo_to_ros" name="gazebo_to_ros" type="gazebo_to_ros_node" launch-prefix="xterm -e"/>
    <node unless="$(arg debug_gazebo_to_tos)" pkg="gazebo_to_ros" name="gazebo_to_ros" type="gazebo_to_ros_node"/>

		<!-- Load the tf_broadcaster node -->
		<node pkg="tf_broadcaster" name="tf_broadcaster" type="tf_broadcaster_node"/>

		<!-- Load the fakeSimLightDetection node -->
		<node pkg="feu_tricolore" name="simLightDetection" type="sim_light_detection"/>

		<!-- Load ArTag -->
		<include file="$(find ar_tag)/launch/alvar_simu.launch"/>
		<include file="$(find ar_tag)/launch/ar_tag.launch"/>

		<!-- Load the detection and localisation nodes -->
    <node pkg="localisation" name="landmarks_extraction" type="landmarks_extraction"/>
    <node pkg="localisation" name="visualisation" type="visualisation"/>
    <node pkg="localisation" name="odometry_correction" type="odometry_correction"/>
    <node pkg="localisation" name="cartographie" type="cartographie" output="screen"/>

		<!-- Load the grid maker -->
		<rosparam command="load" file="$(find grid_maker)/cfg/field.yaml" />
		<node pkg="grid_maker" name="grid_maker" type="grid_maker_node" output="screen"/>
		<!-- <node pkg="grid_maker" name="grid_maker" type="construct_map_node"/> -->
		<!-- <node pkg="grid_maker" name="fake_machines_publisher" type="construct_map_test_simulator"/> -->

		<!-- Load the path finder -->
		<param name="navigation/pathFinder/aStarTieBreaking" value="true" />
		<param name="navigation/pathFinder/weightData" value="0.45" />
		<param name="navigation/pathFinder/weightSmooth" value="0.35" />
		<node pkg="path_finder" name="path_finder_node" type="path_finder_node" output="screen" />

		<!-- Load the path tracker -->
		<node pkg="path_tracker" name="path_tracker_node" type="path_tracker_test_node.py"/>

		<!-- Load the fake final approach -->
		<node pkg="approche_finale" name="final_approach" type="finalApproaching_node"/>

		<!-- Load the navigation manager -->
		<node pkg="navigation_manager" name="navigation_manager" type="navigation_manager_node" output="screen"/>
		<node pkg="navigation_manager" name="move_request" type="moveRequest_node.py"/>

		<!-- Load the refbox comm -->
		<node pkg="refbox_comm" name="refbox_comm" type="refBoxComm"/>

		<!-- Load the manager -->
		<node pkg="executeur_taches" name="executeur" type="test_exec"/>
		<node pkg="generateur_taches" name="manager" type="main_node"/>
	</group>

	<!-- Load rviz -->
	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find gazebo_sim_launch)/others/overview.rviz"/>
</launch>
