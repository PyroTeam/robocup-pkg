<launch>
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find gazebo_sim_launch)/worlds/test.world"/>
		<arg name="paused" value="false"/>
		<arg name="use_sim_time" value="true"/>
		<arg name="gui" value="false"/>
		<arg name="headless" value="false"/>
		<arg name="debug" value="false"/>
    </include>


    <!-- Pyro TEAM -->
    <!-- Team Namespace -->
    <group ns="PYRO">
    	<param name="machineLocation/robot1" value="robotino1" />
    	<param name="machineLocation/robot2" value="robotino2" />
    	<param name="machineLocation/robot3" value="robotino3" />
    	<param name="machineLocation/centralizedManager" value="" />
    </group>
    <!-- Robotino Pyro 1 -->
    <group ns="robotino1">
        <param name="teamName" value="PYRO" />
        <param name="teamColor" value="cyan" />
        <param name="robotNumber" value="1" />
        <param name="robotName" value="R1" />
        <param name="simuRobotNamespace" value="robotino1" />

        <!-- Load the gazebo_to_ros node -->
        <arg name="debug_gazebo_to_tos" value="false" />
        <param name="objectDetection/useSimLandmarks" value="true" />
        <node if="$(arg debug_gazebo_to_tos)"
            pkg="gazebo_to_ros" name="gazebo_to_ros" type="gazebo_to_ros_node" launch-prefix="xterm -e"/>
        <node unless="$(arg debug_gazebo_to_tos)"
            pkg="gazebo_to_ros" name="gazebo_to_ros" type="gazebo_to_ros_node"/>

        <!-- Load the tf_broadcaster node -->
        <node pkg="tf_broadcaster" name="tf_broadcaster" type="tf_broadcaster_node"/>

        <!-- Load the fakeSimLightDetection node -->
        <node pkg="feu_tricolore" name="simLightDetection" type="sim_light_detection"/>

        <!-- Load ArTag -->
        <!-- <include file="$(find ar_tag)/launch/alvar_simu.launch"/> -->
        <!-- <include file="$(find ar_tag)/launch/ar_tag.launch"/> -->

        <!-- Load the objectDetections nodes -->
        <!--         <node pkg="localisation" name="landmarks_extraction" type="landmarks_extraction_node"/>
        <node pkg="localisation" name="visualisation" type="visualisation"/>
        <node pkg="localisation" name="machines_publisher" type="Cartographie" output="screen" launch-prefix="xterm -e"/> -->
        <!-- Needeed for visualisation -->
        <!--         <node pkg="localisation" name="odometry_correction" type="odometry_correction_node"/> -->

        <!-- Load the grid maker -->
        <rosparam command="load" file="$(find grid_maker)/cfg/field.yaml" />
        <node pkg="grid_maker" name="grid_maker" type="grid_maker_node"/>
        <!-- 	<node pkg="grid_maker" name="grid_maker" type="construct_map_node"/>-->
        <!-- <node pkg="grid_maker" name="fake_machines_publisher" type="construct_map_test_simulator"/> -->

        <!-- Load the path finder -->
        <!--<node pkg="pathfinder" name="pathfinder" type="pathfinder_node"/>-->
        <param name="navigation/pathFinder/aStarTieBreaking" value="true" />
        <param name="navigation/pathFinder/weightData" value="0.45" />
        <param name="navigation/pathFinder/weightSmooth" value="0.35" />
        <node pkg="path_finder" name="path_finder_node" type="path_finder_node" output="screen"/>
        <!--<node pkg="pathfinder" name="pathfinder" type="pathfinder_node" launch-prefix="xterm -e"/>-->

        <!-- <node pkg="path_tracker" name="path_trackerRequest_node" type="path_trackerRequest_node.py" output="screen"/> -->

        <!-- Load the path tracker -->
        <!-- <node pkg="path_tracker" name="path_tracker_node" type="path_tracker_test_node.py" launch-prefix="xterm -e"/> -->
        <node pkg="path_tracker" name="path_tracker_node" type="path_tracker_node" output="screen"/>

        <!-- Load the fake final approach -->
        <!-- <node pkg="final_approach" name="final_approach" type="simFinalApproach_node"/> -->
        <!-- <node pkg="final_approach" name="final_approach" type="simFinalApproach_node" launch-prefix="xterm -e"/> -->

        <!-- Load the navigation manager -->
        <!-- <node pkg="navigation_manager" name="navigation_manager" type="navigation_manager_node"/> -->
        <node pkg="navigation_manager" name="navigation_manager" type="navigation_manager_node" launch-prefix="xterm -e"/>
        <node pkg="navigation_manager" name="move_request" type="moveRequest_node.py"/>
        <!-- <node pkg="navigation_manager" name="move_request" type="moveRequest_node.py" launch-prefix="xterm -e"/> -->

        <!-- Load the refbox comm -->
        <node pkg="refbox_comm" name="refbox_comm" type="refBoxComm"/>

        <!-- Load the manager -->
        <!-- <node pkg="executeur_taches" name="executeur" type="test_exec"/> -->
        <!-- <node pkg="executeur_taches" name="executeur" type="test_exec" launch-prefix="xterm -e"/> -->
        <!-- <node pkg="generateur_taches" name="manager" type="main_node" launch-prefix="xterm -e"/> -->

        <!-- Load rviz -->
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find gazebo_sim_launch)/others/overview.rviz"/>
    </group>
</launch>
